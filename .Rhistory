matrix(1:4, 2, 2)
mangos <- matrix(1:4, 2, 2)
solve(mangos)
makeCacheMatrix <- function(imputMatrix = matrix()) {
cacheMatrix <- NULL
setMatrix <- function(newImputMatrix) {
imputMatrix <<- newImputMatrix
cacheMatrix <<- NULL
}
getMatrix <- function() imputMatrix
setInverseMatrix <- function(inverseMatrix) cacheMatrix <<- inverseMatrix
getInverseMatrix <- function() cacheMatrix
list(
setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix
)
}
makeCacheMatrix(mangos)
mangosCache <- makeCacheMatrix(mangos)
mangosCache$getMatrix()
mangosCache$getInverseMatrix()
cacheSolve <- function(madebyCacheMatrix, ...) {
cacheMatrix <- madebyCacheMatrix$getmean()
if(!is.null(cacheMatrix)) {
message("Getting cached inverse of the matrix")
return(cacheMatrix)
}
matrixToSolve <- madebyCacheMatrix$get()
cacheMatrix <- solve(matrixToSolve, ...)
madebyCacheMatrix$setmean(cacheMatrix)
cacheMatrix
}
cacheSolve(mangosCache)
solve(mangosCache)
mangosCache <-  makeCacheMatrix(mangos)
cacheSolve(mangosCache)
makeCacheMatrix <- function(imputMatrix = matrix()) {
cacheMatrix <- NULL
setMatrix <- function(newImputMatrix) {
imputMatrix <<- newImputMatrix
cacheMatrix <<- NULL
}
getMatrix <- function() imputMatrix
setInverseMatrix <- function(inverseMatrix) cacheMatrix <<- inverseMatrix
getInverseMatrix <- function() cacheMatrix
list(
setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix
)
}
## Write a short comment describing this function
cacheSolve <- function(madebyCacheMatrix, ...) {
cacheMatrix <- madebyCacheMatrix$getmean()
if(!is.null(cacheMatrix)) {
message("Getting cached inverse of the matrix")
return(cacheMatrix)
}
matrixToSolve <- madebyCacheMatrix$get()
cacheMatrix <- solve(matrixToSolve, ...)
madebyCacheMatrix$setmean(cacheMatrix)
cacheMatrix
}
mangosCache <-  makeCacheMatrix(mangos)
cacheSolve(mangosCache)
source('D:/git/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve <- function(madebyCacheMatrix, ...) {
cacheMatrix <- madebyCacheMatrix$getmean()
if(!is.null(cacheMatrix)) {
message("Getting cached inverse of the matrix")
return(cacheMatrix)
}
matrixToSolve <- madebyCacheMatrix$get()
cacheMatrix <- solve(matrixToSolve)
madebyCacheMatrix$setMatrix(cacheMatrix)
cacheMatrix
}
cacheSolve(mangosCache)
debug(cacheSolve)
cacheSolve(mangosCache)
is.null(mangos)
is.null(mangosCache)
message("lol")
debug(cacheSolve)
cacheSolve(mangosCache)
source('D:/git/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
bongos <- matrix(2:5, 2, 2)
solve(bongos)
mangosCache <-  makeCacheMatrix(mangos)
cacheSolve(mangosCache)
bongosCache <-  makeCacheMatrix(bongos)
cacheSolve(mangosCache)
## makeCacheMatrix has a single argument
## Write a short comment describing this function
makeCacheMatrix <- function(imputMatrix = matrix()) {
cacheMatrix <- NULL
setMatrix <- function(newImputMatrix) {
imputMatrix <<- newImputMatrix
cacheMatrix <<- NULL
}
getMatrix <- function() imputMatrix
setInverseMatrix <- function(inverseMatrix) cacheMatrix <<- inverseMatrix
getInverseMatrix <- function() cacheMatrix
list(
setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix
)
}
## Write a short comment describing this function
cacheSolve <- function(madebyCacheMatrix, ...) {
cacheMatrix <- madebyCacheMatrix$getMatrix()
if(!is.null(cacheMatrix)) {
message("Getting cached inverse of the matrix")
return(cacheMatrix)
}
matrixToSolve <- madebyCacheMatrix$get()
cacheMatrix <- solve(matrixToSolve)
madebyCacheMatrix$setInverseMatrix(cacheMatrix)
cacheMatrix
}
mangos <- matrix(2:5, 2, 2)
mangosCache <-  makeCacheMatrix(mangos)
cacheSolve(mangosCache)
bongosCache <-  makeCacheMatrix(bongos)
cacheSolve(mangosCache)
cacheSolve(bongosCache)
makeCacheMatrix <- function(imputMatrix = matrix()) {
cacheMatrix <- NULL
setMatrix <- function(newImputMatrix) {
imputMatrix <<- newImputMatrix
cacheMatrix <<- NULL
}
getMatrix <- function() imputMatrix
setInverseMatrix <- function(inverseMatrix) cacheMatrix <<- inverseMatrix
getInverseMatrix <- function() cacheMatrix
list(
setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix
)
}
## Write a short comment describing this function
cacheSolve <- function(madebyCacheMatrix, ...) {
cacheMatrix <- madebyCacheMatrix$getMatrix()
if(!is.null(cacheMatrix)) {
message("Getting cached inverse of the matrix")
return(cacheMatrix)
}
matrixToSolve <- madebyCacheMatrix$get()
cacheMatrix <- solve(matrixToSolve)
madebyCacheMatrix$setInverseMatrix(cacheMatrix)
cacheMatrix
}
mangosCache <-  makeCacheMatrix(mangos)
bongosCache <-  makeCacheMatrix(bongos)
cacheSolve(bongosCache)
bongosCache <-  makeCacheMatrix(bongos)
cacheMatrix
makeCacheMatrix <- function(imputMatrix = matrix()) {
cacheMatrix <- NULL
setMatrix <- function(newImputMatrix) {
imputMatrix <<- newImputMatrix
cacheMatrix <<- NULL
}
getMatrix <- function() imputMatrix
setInverseMatrix <- function(inverseMatrix) cacheMatrix <<- inverseMatrix
getInverseMatrix <- function() cacheMatrix
list(
setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix
)
}
## Write a short comment describing this function
cacheSolve <- function(madebyCacheMatrix, ...) {
cacheMatrix <- madebyCacheMatrix$getMatrix()
if(!is.null(cacheMatrix)) {
message("Getting cached inverse of the matrix")
return(cacheMatrix)
}
matrixToSolve <- madebyCacheMatrix$getMatrix()
cacheMatrix <- solve(matrixToSolve)
madebyCacheMatrix$setInverseMatrix(cacheMatrix)
cacheMatrix
}
bongosCache <-  makeCacheMatrix(bongos)
cacheSolve(bongosCache)
cacheSolve(mangosCache)
mangos <- matrix(1:4, 2, 2)
bongos <- matrix(2:5, 2, 2)
mangosCache <-  makeCacheMatrix(mangos)
cacheSolve(mangosCache)
cacheSolve(bongosCache)
bongosCache <-  makeCacheMatrix(bongos)
mangosCache <-  makeCacheMatrix(mangos)
bongosCache <-  makeCacheMatrix(bongos)
cacheSolve(mangosCache)
cacheSolve(mangosCache)
cacheSolve(bongosCache)
cacheSolve(bongosCache)
makeCacheMatrix <- function(imputMatrix = matrix()) {
cacheMatrix <- NULL
setMatrix <- function(newImputMatrix) {
imputMatrix <<- newImputMatrix
cacheMatrix <<- NULL
}
getMatrix <- function() inverseMatrix
setInverseMatrix <- function(inverseMatrix) cacheMatrix <<- inverseMatrix
getInverseMatrix <- function() cacheMatrix
list(
setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix
)
}
cacheSolve <- function(madebyCacheMatrix, ...) {
cacheMatrix <- madebyCacheMatrix$getMatrix()
if(!is.null(cacheMatrix)) {
message("Getting cached inverse of the matrix")
return(cacheMatrix)
}
matrixToSolve <- madebyCacheMatrix$getMatrix()
cacheMatrix <- solve(matrixToSolve)
madebyCacheMatrix$setInverseMatrix(cacheMatrix)
cacheMatrix
}
mangos <- matrix(1:4, 2, 2)
mangosCache <-  makeCacheMatrix(mangos)
cacheSolve(mangosCache)
makeCacheMatrix <- function(imputMatrix = matrix()) {
cacheMatrix <- NULL
setMatrix <- function(newImputMatrix) {
imputMatrix <<- newImputMatrix
cacheMatrix <<- NULL
}
getMatrix <- function() imputMatrix
setInverseMatrix <- function(inverseMatrix) cacheMatrix <<- inverseMatrix
getInverseMatrix <- function() cacheMatrix
list(
setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix
)
}
mangos <- matrix(1:4, 2, 2)
mangosCache <-  makeCacheMatrix(mangos)
mangosCache$getMatrix()
mangosCache$getInverseMatrix()
makeCacheMatrix <- function(imputMatrix = matrix()) {
cacheMatrix <- NULL
setMatrix <- function(newImputMatrix) {
imputMatrix <<- newImputMatrix
cacheMatrix <<- NULL
}
getMatrix <- function() imputMatrix
setInverseMatrix <- function(inverseMatrix) cacheMatrix <<- inverseMatrix
getInverseMatrix <- function() cacheMatrix
list(
setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix
)
}
cacheSolve <- function(madebyCacheMatrix, ...) {
cacheMatrix <- madebyCacheMatrix$getInverseMatrix()
if(!is.null(cacheMatrix)) {
message("Getting cached inverse of the matrix")
return(cacheMatrix)
}
matrixToSolve <- madebyCacheMatrix$getMatrix()
cacheMatrix <- solve(matrixToSolve)
madebyCacheMatrix$setInverseMatrix(cacheMatrix)
cacheMatrix
}
mangos <- matrix(1:4, 2, 2)
mangosCache <-  makeCacheMatrix(mangos)
cacheSolve(mangosCache)
cacheSolve(mangosCache)
